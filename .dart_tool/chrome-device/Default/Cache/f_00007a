define(['dart_sdk'], (function load__packages__collection__src__canonicalized_map_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var canonicalized_map = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $forEach = dartx.forEach;
  var $map = dartx.map;
  var $addEntries = dartx.addEntries;
  var $cast = dartx.cast;
  var $clear = dartx.clear;
  var $containsKey = dartx.containsKey;
  var $values = dartx.values;
  var $any = dartx.any;
  var $entries = dartx.entries;
  var $isEmpty = dartx.isEmpty;
  var $isNotEmpty = dartx.isNotEmpty;
  var $length = dartx.length;
  var $putIfAbsent = dartx.putIfAbsent;
  var $remove = dartx.remove;
  var $removeWhere = dartx.removeWhere;
  var $update = dartx.update;
  var $updateAll = dartx.updateAll;
  var $addAll = dartx.addAll;
  var $containsValue = dartx.containsValue;
  var $keys = dartx.keys;
  dart._checkModuleNullSafetyMode(false);
  var I = [
    "file:///C:/Users/Avin%20Ronson/AppData/Roaming/Pub/Cache/hosted/pub.dartlang.org/collection-1.15.0-nullsafety.5/lib/src/canonicalized_map.dart",
    "package:collection/src/canonicalized_map.dart"
  ];
  var _base = dart.privateName(canonicalized_map, "_base");
  var _canonicalize = dart.privateName(canonicalized_map, "_canonicalize");
  var _isValidKeyFn = dart.privateName(canonicalized_map, "_isValidKeyFn");
  var _isValidKey = dart.privateName(canonicalized_map, "_isValidKey");
  const _is_CanonicalizedMap_default = Symbol('_is_CanonicalizedMap_default');
  canonicalized_map.CanonicalizedMap$ = dart.generic((C, K, V) => {
    var LinkedMapOfC$MapEntryOfK$V = () => (LinkedMapOfC$MapEntryOfK$V = dart.constFn(_js_helper.LinkedMap$(C, MapEntryOfK$V())))();
    var MapEntryOfC$MapEntryOfK$V = () => (MapEntryOfC$MapEntryOfK$V = dart.constFn(core.MapEntry$(C, MapEntryOfK$V())))();
    var MapEntryOfK$VToMapEntryOfC$MapEntryOfK$V = () => (MapEntryOfK$VToMapEntryOfC$MapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfC$MapEntryOfK$V(), [MapEntryOfK$V()])))();
    var MapEntryOfC$MapEntryOfK$VToMapEntryOfK$V = () => (MapEntryOfC$MapEntryOfK$VToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [MapEntryOfC$MapEntryOfK$V()])))();
    var CAndMapEntryOfK$VTovoid = () => (CAndMapEntryOfK$VTovoid = dart.constFn(dart.fnType(dart.void, [C, MapEntryOfK$V()])))();
    var CAndMapEntryOfK$VTobool = () => (CAndMapEntryOfK$VTobool = dart.constFn(dart.fnType(core.bool, [C, MapEntryOfK$V()])))();
    var CAndMapEntryOfK$VToMapEntryOfK$V = () => (CAndMapEntryOfK$VToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [C, MapEntryOfK$V()])))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVTovoid = () => (KAndVTovoid = dart.constFn(dart.fnType(dart.void, [K, V])))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var MapEntryOfK$VTobool = () => (MapEntryOfK$VTobool = dart.constFn(dart.fnType(core.bool, [MapEntryOfK$V()])))();
    var MapEntryOfK$VToK = () => (MapEntryOfK$VToK = dart.constFn(dart.fnType(K, [MapEntryOfK$V()])))();
    var VoidToMapEntryOfK$V = () => (VoidToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [])))();
    var MapEntryOfK$VToMapEntryOfK$V = () => (MapEntryOfK$VToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [MapEntryOfK$V()])))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var MapEntryOfK$VToV = () => (MapEntryOfK$VToV = dart.constFn(dart.fnType(V, [MapEntryOfK$V()])))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    class CanonicalizedMap extends core.Object {
      _get(key) {
        let t0;
        if (!dart.test(this[_isValidKey](key))) return null;
        let pair = this[_base][$_get]((t0 = K.as(key), this[_canonicalize](t0)));
        return pair == null ? null : pair.value;
      }
      _set(key, value$) {
        let value = value$;
        let t0;
        K.as(key);
        V.as(value);
        if (!dart.test(this[_isValidKey](key))) return value$;
        this[_base][$_set]((t0 = key, this[_canonicalize](t0)), new (MapEntryOfK$V()).__(key, value));
        return value$;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[0], 63, 25, "other");
        other[$forEach](dart.fn((key, value) => {
          let t1, t0;
          t0 = key;
          t1 = value;
          this._set(t0, t1);
          return t1;
        }, KAndVTovoid()));
      }
      addEntries(entries) {
        IterableOfMapEntryOfK$V().as(entries);
        if (entries == null) dart.nullFailed(I[0], 68, 44, "entries");
        return this[_base][$addEntries](entries[$map](MapEntryOfC$MapEntryOfK$V(), dart.fn(e => {
          let t0;
          if (e == null) dart.nullFailed(I[0], 69, 13, "e");
          return new (MapEntryOfC$MapEntryOfK$V()).__((t0 = e.key, this[_canonicalize](t0)), new (MapEntryOfK$V()).__(e.key, e.value));
        }, MapEntryOfK$VToMapEntryOfC$MapEntryOfK$V())));
      }
      cast(K2, V2) {
        return this[_base][$cast](K2, V2);
      }
      clear() {
        this[_base][$clear]();
      }
      containsKey(key) {
        let t0;
        if (!dart.test(this[_isValidKey](key))) return false;
        return this[_base][$containsKey]((t0 = K.as(key), this[_canonicalize](t0)));
      }
      containsValue(value) {
        return this[_base][$values][$any](dart.fn(pair => {
          if (pair == null) dart.nullFailed(I[0], 87, 25, "pair");
          return dart.equals(pair.value, value);
        }, MapEntryOfK$VTobool()));
      }
      get entries() {
        return this[_base][$entries][$map](MapEntryOfK$V(), dart.fn(e => {
          if (e == null) dart.nullFailed(I[0], 91, 26, "e");
          return new (MapEntryOfK$V()).__(e.value.key, e.value.value);
        }, MapEntryOfC$MapEntryOfK$VToMapEntryOfK$V()));
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[0], 94, 36, "f");
        this[_base][$forEach](dart.fn((key, pair) => {
          if (pair == null) dart.nullFailed(I[0], 95, 25, "pair");
          return f(pair.key, pair.value);
        }, CAndMapEntryOfK$VTovoid()));
      }
      get isEmpty() {
        return this[_base][$isEmpty];
      }
      get isNotEmpty() {
        return this[_base][$isNotEmpty];
      }
      get keys() {
        return this[_base][$values][$map](K, dart.fn(pair => {
          if (pair == null) dart.nullFailed(I[0], 105, 45, "pair");
          return pair.key;
        }, MapEntryOfK$VToK()));
      }
      get length() {
        return this[_base][$length];
      }
      map(K2, V2, transform) {
        if (transform == null) dart.nullFailed(I[0], 111, 59, "transform");
        return this[_base][$map](K2, V2, dart.fn((_, pair) => {
          if (pair == null) dart.nullFailed(I[0], 112, 21, "pair");
          return transform(pair.key, pair.value);
        }, dart.fnType(core.MapEntry$(K2, V2), [C, MapEntryOfK$V()])));
      }
      putIfAbsent(key, ifAbsent) {
        let t0;
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[0], 115, 37, "ifAbsent");
        return this[_base][$putIfAbsent]((t0 = key, this[_canonicalize](t0)), dart.fn(() => new (MapEntryOfK$V()).__(key, ifAbsent()), VoidToMapEntryOfK$V())).value;
      }
      remove(key) {
        let t0, t0$;
        if (!dart.test(this[_isValidKey](key))) return null;
        let pair = this[_base][$remove]((t0 = K.as(key), this[_canonicalize](t0)));
        t0$ = pair;
        return t0$ == null ? null : t0$.value;
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[0], 129, 50, "test");
        return this[_base][$removeWhere](dart.fn((_, pair) => {
          if (pair == null) dart.nullFailed(I[0], 130, 29, "pair");
          return test(pair.key, pair.value);
        }, CAndMapEntryOfK$VTobool()));
      }
      retype(K2, V2) {
        return this.cast(K2, V2);
      }
      update(key, update, opts) {
        let t0;
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(I[0], 136, 33, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        return this[_base][$update]((t0 = key, this[_canonicalize](t0)), dart.fn(pair => {
          if (pair == null) dart.nullFailed(I[0], 137, 41, "pair");
          let value = pair.value;
          let newValue = update(value);
          if (core.identical(newValue, value)) return pair;
          return new (MapEntryOfK$V()).__(key, newValue);
        }, MapEntryOfK$VToMapEntryOfK$V()), {ifAbsent: ifAbsent == null ? null : dart.fn(() => new (MapEntryOfK$V()).__(key, ifAbsent()), VoidToMapEntryOfK$V())}).value;
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(I[0], 147, 45, "update");
        return this[_base][$updateAll](dart.fn((_, pair) => {
          if (pair == null) dart.nullFailed(I[0], 148, 27, "pair");
          let value = pair.value;
          let key = pair.key;
          let newValue = update(key, value);
          if (core.identical(value, newValue)) return pair;
          return new (MapEntryOfK$V()).__(key, newValue);
        }, CAndMapEntryOfK$VToMapEntryOfK$V()));
      }
      get values() {
        return this[_base][$values][$map](V, dart.fn(pair => {
          if (pair == null) dart.nullFailed(I[0], 157, 47, "pair");
          return pair.value;
        }, MapEntryOfK$VToV()));
      }
      toString() {
        return collection.MapBase.mapToString(this);
      }
      [_isValidKey](key) {
        return K.is(key) && (this[_isValidKeyFn] == null || dart.test(dart.nullCheck(this[_isValidKeyFn])(key)));
      }
    }
    (CanonicalizedMap.new = function(canonicalize, opts) {
      if (canonicalize == null) dart.nullFailed(I[0], 28, 38, "canonicalize");
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      this[_base] = new (LinkedMapOfC$MapEntryOfK$V()).new();
      this[_canonicalize] = canonicalize;
      this[_isValidKeyFn] = isValidKey;
      ;
    }).prototype = CanonicalizedMap.prototype;
    (CanonicalizedMap.from = function(other, canonicalize, opts) {
      if (other == null) dart.nullFailed(I[0], 42, 35, "other");
      if (canonicalize == null) dart.nullFailed(I[0], 42, 60, "canonicalize");
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      this[_base] = new (LinkedMapOfC$MapEntryOfK$V()).new();
      this[_canonicalize] = canonicalize;
      this[_isValidKeyFn] = isValidKey;
      this.addAll(other);
    }).prototype = CanonicalizedMap.prototype;
    CanonicalizedMap.prototype[dart.isMap] = true;
    dart.addTypeTests(CanonicalizedMap);
    CanonicalizedMap.prototype[_is_CanonicalizedMap_default] = true;
    dart.addTypeCaches(CanonicalizedMap);
    CanonicalizedMap[dart.implements] = () => [core.Map$(K, V)];
    dart.setMethodSignature(CanonicalizedMap, () => ({
      __proto__: dart.getMethods(CanonicalizedMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      cast: dart.gFnType((K2, V2) => [core.Map$(K2, V2), []], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), []], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      retype: dart.gFnType((K2, V2) => [core.Map$(K2, V2), []], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_isValidKey]: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(CanonicalizedMap, () => ({
      __proto__: dart.getGetters(CanonicalizedMap.__proto__),
      entries: core.Iterable$(core.MapEntry$(K, V)),
      [$entries]: core.Iterable$(core.MapEntry$(K, V)),
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K),
      length: core.int,
      [$length]: core.int,
      values: core.Iterable$(V),
      [$values]: core.Iterable$(V)
    }));
    dart.setLibraryUri(CanonicalizedMap, I[1]);
    dart.setFieldSignature(CanonicalizedMap, () => ({
      __proto__: dart.getFields(CanonicalizedMap.__proto__),
      [_canonicalize]: dart.finalFieldType(dart.fnType(C, [K])),
      [_isValidKeyFn]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [K]))),
      [_base]: dart.finalFieldType(core.Map$(C, core.MapEntry$(K, V)))
    }));
    dart.defineExtensionMethods(CanonicalizedMap, [
      '_get',
      '_set',
      'addAll',
      'addEntries',
      'cast',
      'clear',
      'containsKey',
      'containsValue',
      'forEach',
      'map',
      'putIfAbsent',
      'remove',
      'removeWhere',
      'update',
      'updateAll',
      'toString'
    ]);
    dart.defineExtensionAccessors(CanonicalizedMap, [
      'entries',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'length',
      'values'
    ]);
    return CanonicalizedMap;
  });
  canonicalized_map.CanonicalizedMap = canonicalized_map.CanonicalizedMap$();
  dart.addTypeTests(canonicalized_map.CanonicalizedMap, _is_CanonicalizedMap_default);
  dart.trackLibraries("packages/collection/src/canonicalized_map.dart", {
    "package:collection/src/canonicalized_map.dart": canonicalized_map
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["canonicalized_map.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../D:/packages/collection/src/canonicalized_map.dart.lib.js"}');
  // Exports:
  return {
    src__canonicalized_map: canonicalized_map
  };
}));

//# sourceMappingURL=canonicalized_map.dart.lib.js.map
